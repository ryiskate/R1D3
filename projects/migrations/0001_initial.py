# Generated by Django 4.2.10 on 2025-06-13 03:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('strategy', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameBuild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('version_number', models.CharField(help_text='e.g., 0.1.0, 1.0.0', max_length=50)),
                ('version_type', models.CharField(choices=[('internal', 'Internal'), ('alpha', 'Alpha'), ('beta', 'Beta'), ('release_candidate', 'Release Candidate'), ('release', 'Release'), ('patch', 'Patch')], max_length=20)),
                ('build_date', models.DateTimeField()),
                ('notes', models.TextField(blank=True, help_text='Release notes or changelog')),
                ('build_file', models.FileField(blank=True, null=True, upload_to='game_builds/')),
                ('download_url', models.URLField(blank=True, help_text='External download URL if not hosted directly')),
                ('platform', models.CharField(help_text='Platform this build is for', max_length=50)),
                ('is_public', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GameMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateField()),
                ('is_completed', models.BooleanField(default=False)),
                ('completion_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GameProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('tagline', models.CharField(blank=True, help_text='Short description/slogan for the game', max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('concept', 'Concept'), ('pre_production', 'Pre-Production'), ('production', 'Production'), ('alpha', 'Alpha'), ('beta', 'Beta'), ('release', 'Released'), ('post_release', 'Post-Release Support'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='concept', max_length=20)),
                ('genre', models.CharField(choices=[('action', 'Action'), ('adventure', 'Adventure'), ('rpg', 'Role-Playing Game'), ('strategy', 'Strategy'), ('simulation', 'Simulation'), ('sports', 'Sports'), ('puzzle', 'Puzzle'), ('shooter', 'Shooter'), ('platformer', 'Platformer'), ('racing', 'Racing'), ('mmo', 'MMO'), ('other', 'Other')], default='other', max_length=20)),
                ('platforms', models.CharField(choices=[('pc', 'PC'), ('mobile', 'Mobile'), ('console', 'Console'), ('web', 'Web'), ('vr', 'Virtual Reality'), ('ar', 'Augmented Reality'), ('multi', 'Multi-platform')], default='pc', max_length=20)),
                ('target_audience', models.CharField(blank=True, max_length=200)),
                ('start_date', models.DateField()),
                ('target_release_date', models.DateField(blank=True, null=True)),
                ('actual_release_date', models.DateField(blank=True, null=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('github_repository', models.URLField(blank=True, help_text='URL to the GitHub repository')),
                ('github_username', models.CharField(blank=True, help_text='GitHub username or organization', max_length=100)),
                ('github_token', models.CharField(blank=True, help_text='GitHub personal access token (stored securely)', max_length=100)),
                ('github_webhook_secret', models.CharField(blank=True, help_text='Secret for GitHub webhooks', max_length=100)),
                ('github_branch', models.CharField(default='main', help_text='Default branch to track', max_length=100)),
                ('auto_sync', models.BooleanField(default=False, help_text='Automatically sync with GitHub repository')),
                ('trello_board', models.URLField(blank=True, help_text='URL to Trello board if used')),
                ('discord_channel', models.URLField(blank=True, help_text='URL to Discord channel')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='game_logos/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='game_covers/')),
                ('lead_artist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='art_directed_games', to=settings.AUTH_USER_MODEL)),
                ('lead_designer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='designed_games', to=settings.AUTH_USER_MODEL)),
                ('lead_developer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_games', to=settings.AUTH_USER_MODEL)),
                ('related_goals', models.ManyToManyField(blank=True, related_name='game_projects', to='strategy.goal')),
                ('related_objectives', models.ManyToManyField(blank=True, related_name='game_projects', to='strategy.objective')),
                ('team_members', models.ManyToManyField(blank=True, related_name='game_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateField()),
                ('is_completed', models.BooleanField(default=False)),
                ('completion_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('active', 'Active'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_projects', to=settings.AUTH_USER_MODEL)),
                ('related_goals', models.ManyToManyField(blank=True, related_name='projects', to='strategy.goal')),
                ('related_objectives', models.ManyToManyField(blank=True, related_name='projects', to='strategy.objective')),
                ('team_members', models.ManyToManyField(blank=True, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('to_do', 'To Do'), ('in_progress', 'In Progress'), ('in_review', 'In Review'), ('done', 'Done'), ('blocked', 'Blocked')], default='to_do', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('actual_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='projects.milestone')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('impact', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('severe', 'Severe')], max_length=20)),
                ('probability', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('status', models.CharField(choices=[('identified', 'Identified'), ('assessed', 'Assessed'), ('mitigated', 'Mitigated'), ('resolved', 'Resolved'), ('accepted', 'Accepted')], default='identified', max_length=20)),
                ('mitigation_plan', models.TextField(blank=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_risks', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risks', to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaytestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('location', models.CharField(blank=True, max_length=200)),
                ('is_remote', models.BooleanField(default=False)),
                ('objectives', models.TextField(help_text='What are you trying to learn from this playtest?')),
                ('participants_count', models.IntegerField(default=0)),
                ('summary', models.TextField(blank=True, help_text='Summary of findings')),
                ('build', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='playtest_sessions', to='projects.gamebuild')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playtest_sessions', to='projects.gameproject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaytestFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tester_name', models.CharField(blank=True, max_length=100)),
                ('tester_email', models.EmailField(blank=True, max_length=254)),
                ('tester_demographics', models.CharField(blank=True, help_text='Age, gaming experience, etc.', max_length=200)),
                ('overall_experience', models.CharField(choices=[('very_negative', 'Very Negative'), ('negative', 'Negative'), ('neutral', 'Neutral'), ('positive', 'Positive'), ('very_positive', 'Very Positive')], default='neutral', max_length=20)),
                ('gameplay_feedback', models.TextField(blank=True)),
                ('visual_feedback', models.TextField(blank=True)),
                ('audio_feedback', models.TextField(blank=True)),
                ('narrative_feedback', models.TextField(blank=True)),
                ('technical_issues', models.TextField(blank=True)),
                ('suggestions', models.TextField(blank=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='projects.playtestsession')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='milestone',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='projects.project'),
        ),
        migrations.CreateModel(
            name='GameTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('task_type', models.CharField(choices=[('design', 'Game Design'), ('art', 'Art'), ('programming', 'Programming'), ('audio', 'Audio'), ('testing', 'Testing'), ('writing', 'Writing'), ('other', 'Other')], default='other', max_length=20)),
                ('status', models.CharField(choices=[('backlog', 'Backlog'), ('to_do', 'To Do'), ('in_progress', 'In Progress'), ('in_review', 'In Review'), ('done', 'Done'), ('blocked', 'Blocked')], default='backlog', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('actual_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='game_tasks', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.gameproject')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='projects.gamemilestone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='gamemilestone',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='projects.gameproject'),
        ),
        migrations.CreateModel(
            name='GameDesignDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('high_concept', models.TextField(help_text='One-paragraph summary of the game')),
                ('player_experience', models.TextField(help_text='What the player will experience')),
                ('core_mechanics', models.TextField(help_text='Core gameplay mechanics')),
                ('game_rules', models.TextField(blank=True, help_text='Rules of the game')),
                ('controls', models.TextField(blank=True, help_text='Player controls')),
                ('story_synopsis', models.TextField(blank=True, help_text="Synopsis of the game's story")),
                ('world_building', models.TextField(blank=True, help_text='Description of the game world')),
                ('art_style', models.TextField(blank=True, help_text='Description of the visual style')),
                ('audio_style', models.TextField(blank=True, help_text='Description of music and sound design')),
                ('technical_requirements', models.TextField(blank=True, help_text='Technical specifications and requirements')),
                ('monetization', models.TextField(blank=True, help_text='Monetization strategy')),
                ('marketing', models.TextField(blank=True, help_text='Marketing strategy')),
                ('game', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='design_document', to='projects.gameproject')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='gamebuild',
            name='game',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='builds', to='projects.gameproject'),
        ),
        migrations.CreateModel(
            name='GameBug',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('steps_to_reproduce', models.TextField()),
                ('expected_result', models.TextField()),
                ('actual_result', models.TextField()),
                ('severity', models.CharField(choices=[('trivial', 'Trivial'), ('minor', 'Minor'), ('major', 'Major'), ('critical', 'Critical'), ('blocker', 'Blocker')], default='minor', max_length=20)),
                ('status', models.CharField(choices=[('open', 'Open'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('fixed', 'Fixed'), ('verified', 'Verified'), ('closed', 'Closed'), ('wont_fix', "Won't Fix")], default='open', max_length=20)),
                ('screenshot', models.ImageField(blank=True, null=True, upload_to='bug_screenshots/')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_bugs', to=settings.AUTH_USER_MODEL)),
                ('build', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bugs', to='projects.gamebuild')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bugs', to='projects.gameproject')),
                ('reported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_bugs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GameAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('asset_type', models.CharField(choices=[('2d_art', '2D Art'), ('3d_model', '3D Model'), ('animation', 'Animation'), ('texture', 'Texture'), ('sound', 'Sound Effect'), ('music', 'Music'), ('voice', 'Voice Acting'), ('code', 'Code'), ('document', 'Document'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('review', 'In Review'), ('approved', 'Approved'), ('implemented', 'Implemented'), ('rejected', 'Rejected')], default='planned', max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='game_assets/')),
                ('external_url', models.URLField(blank=True, help_text='URL to external storage if not uploaded directly')),
                ('category', models.CharField(blank=True, help_text='Custom category for organization', max_length=100)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=200)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_assets', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_assets', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='projects.gameproject')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
